#include <iostream>
#include <string>
#include <vector>
#include <cmath>
using namespace std;

static int lu[] = {1, 64, 0, 1, 65, 1, 1, 66, 2, 1, 67, 3, 1, 68, 4, 1, 69, 5, 1, 70, 6, 1, 71, 7, 1, 72, 8, 1, 73, 9, 1, 74, 10, 1, 75, 11, 1, 76, 12, 1, 77, 13, 1, 78, 14, 1, 79, 15, 1, 80, 16, 1, 81, 17, 1, 82, 18, 1, 83, 19, 1, 84, 20, 1, 85, 21, 1, 86, 22, 1, 87, 23, 1, 88, 24, 1, 89, 25, 1, 90, 26, 1, 91, 27, 1, 92, 28, 1, 93, 29, 1, 94, 30, 1, 95, 31, 1, 96, 32, 1, 97, 33, 1, 98, 34, 1, 99, 35, 1, 100, 36, 1, 101, 37, 1, 102, 38, 1, 103, 39, 1, 104, 40, 1, 105, 41, 1, 106, 42, 1, 107, 43, 1, 108, 44, 1, 109, 45, 1, 110, 46, 1, 111, 47, 1, 112, 48, 1, 113, 49, 1, 114, 50, 1, 115, 51, 1, 116, 52, 1, 117, 53, 1, 118, 54, 1, 119, 55, 1, 120, 56, 1, 121, 57, 1, 122, 58, 1, 123, 59, 1, 124, 60, 1, 125, 61, 1, 126, 62, 1, 127, 63, 2, 32, 0, 2, 33, 1, 2, 34, 2, 2, 35, 3, 2, 36, 4, 2, 37, 5, 2, 38, 6, 2, 39, 7, 2, 40, 8, 2, 41, 9, 2, 42, 10, 2, 43, 11, 2, 44, 12, 2, 45, 13, 2, 46, 14, 2, 47, 15, 2, 48, 16, 2, 49, 17, 2, 50, 18, 2, 51, 19, 2, 52, 20, 2, 53, 21, 2, 54, 22, 2, 55, 23, 2, 56, 24, 2, 57, 25, 2, 58, 26, 2, 59, 27, 2, 60, 28, 2, 61, 29, 2, 62, 30, 2, 63, 31, 3, 96, 64, 3, 97, 65, 3, 98, 66, 3, 99, 67, 3, 100, 68, 3, 101, 69, 3, 102, 70, 3, 103, 71, 3, 104, 72, 3, 105, 73, 3, 106, 74, 3, 107, 75, 3, 108, 76, 3, 109, 77, 3, 110, 78, 3, 111, 79, 3, 112, 80, 3, 113, 81, 3, 114, 82, 3, 115, 83, 3, 116, 84, 3, 117, 85, 3, 118, 86, 3, 119, 87, 3, 120, 88, 3, 121, 89, 3, 122, 90, 3, 123, 91, 3, 124, 92, 3, 125, 93, 3, 126, 94, 3, 127, 95, 4, 16, 0, 4, 17, 1, 4, 18, 2, 4, 19, 3, 4, 20, 4, 4, 21, 5, 4, 22, 6, 4, 23, 7, 4, 24, 8, 4, 25, 9, 4, 26, 10, 4, 27, 11, 4, 28, 12, 4, 29, 13, 4, 30, 14, 4, 31, 15, 5, 48, 32, 5, 49, 33, 5, 50, 34, 5, 51, 35, 5, 52, 36, 5, 53, 37, 5, 54, 38, 5, 55, 39, 5, 56, 40, 5, 57, 41, 5, 58, 42, 5, 59, 43, 5, 60, 44, 5, 61, 45, 5, 62, 46, 5, 63, 47, 6, 80, 64, 6, 81, 65, 6, 82, 66, 6, 83, 67, 6, 84, 68, 6, 85, 69, 6, 86, 70, 6, 87, 71, 6, 88, 72, 6, 89, 73, 6, 90, 74, 6, 91, 75, 6, 92, 76, 6, 93, 77, 6, 94, 78, 6, 95, 79, 7, 112, 96, 7, 113, 97, 7, 114, 98, 7, 115, 99, 7, 116, 100, 7, 117, 101, 7, 118, 102, 7, 119, 103, 7, 120, 104, 7, 121, 105, 7, 122, 106, 7, 123, 107, 7, 124, 108, 7, 125, 109, 7, 126, 110, 7, 127, 111, 8, 8, 0, 8, 9, 1, 8, 10, 2, 8, 11, 3, 8, 12, 4, 8, 13, 5, 8, 14, 6, 8, 15, 7, 9, 24, 16, 9, 25, 17, 9, 26, 18, 9, 27, 19, 9, 28, 20, 9, 29, 21, 9, 30, 22, 9, 31, 23, 10, 40, 32, 10, 41, 33, 10, 42, 34, 10, 43, 35, 10, 44, 36, 10, 45, 37, 10, 46, 38, 10, 47, 39, 11, 56, 48, 11, 57, 49, 11, 58, 50, 11, 59, 51, 11, 60, 52, 11, 61, 53, 11, 62, 54, 11, 63, 55, 12, 72, 64, 12, 73, 65, 12, 74, 66, 12, 75, 67, 12, 76, 68, 12, 77, 69, 12, 78, 70, 12, 79, 71, 13, 88, 80, 13, 89, 81, 13, 90, 82, 13, 91, 83, 13, 92, 84, 13, 93, 85, 13, 94, 86, 13, 95, 87, 14, 104, 96, 14, 105, 97, 14, 106, 98, 14, 107, 99, 14, 108, 100, 14, 109, 101, 14, 110, 102, 14, 111, 103, 15, 120, 112, 15, 121, 113, 15, 122, 114, 15, 123, 115, 15, 124, 116, 15, 125, 117, 15, 126, 118, 15, 127, 119, 16, 4, 0, 16, 5, 1, 16, 6, 2, 16, 7, 3, 17, 12, 8, 17, 13, 9, 17, 14, 10, 17, 15, 11, 18, 20, 16, 18, 21, 17, 18, 22, 18, 18, 23, 19, 19, 28, 24, 19, 29, 25, 19, 30, 26, 19, 31, 27, 20, 36, 32, 20, 37, 33, 20, 38, 34, 20, 39, 35, 21, 44, 40, 21, 45, 41, 21, 46, 42, 21, 47, 43, 22, 52, 48, 22, 53, 49, 22, 54, 50, 22, 55, 51, 23, 60, 56, 23, 61, 57, 23, 62, 58, 23, 63, 59, 24, 68, 64, 24, 69, 65, 24, 70, 66, 24, 71, 67, 25, 76, 72, 25, 77, 73, 25, 78, 74, 25, 79, 75, 26, 84, 80, 26, 85, 81, 26, 86, 82, 26, 87, 83, 27, 92, 88, 27, 93, 89, 27, 94, 90, 27, 95, 91, 28, 100, 96, 28, 101, 97, 28, 102, 98, 28, 103, 99, 29, 108, 104, 29, 109, 105, 29, 110, 106, 29, 111, 107, 30, 116, 112, 30, 117, 113, 30, 118, 114, 30, 119, 115, 31, 124, 120, 31, 125, 121, 31, 126, 122, 31, 127, 123, 32, 2, 0, 32, 3, 1, 33, 6, 4, 33, 7, 5, 34, 10, 8, 34, 11, 9, 35, 14, 12, 35, 15, 13, 36, 18, 16, 36, 19, 17, 37, 22, 20, 37, 23, 21, 38, 26, 24, 38, 27, 25, 39, 30, 28, 39, 31, 29, 40, 34, 32, 40, 35, 33, 41, 38, 36, 41, 39, 37, 42, 42, 40, 42, 43, 41, 43, 46, 44, 43, 47, 45, 44, 50, 48, 44, 51, 49, 45, 54, 52, 45, 55, 53, 46, 58, 56, 46, 59, 57, 47, 62, 60, 47, 63, 61, 48, 66, 64, 48, 67, 65, 49, 70, 68, 49, 71, 69, 50, 74, 72, 50, 75, 73, 51, 78, 76, 51, 79, 77, 52, 82, 80, 52, 83, 81, 53, 86, 84, 53, 87, 85, 54, 90, 88, 54, 91, 89, 55, 94, 92, 55, 95, 93, 56, 98, 96, 56, 99, 97, 57, 102, 100, 57, 103, 101, 58, 106, 104, 58, 107, 105, 59, 110, 108, 59, 111, 109, 60, 114, 112, 60, 115, 113, 61, 118, 116, 61, 119, 117, 62, 122, 120, 62, 123, 121, 63, 126, 124, 63, 127, 125, 64, 1, 0, 65, 3, 2, 66, 5, 4, 67, 7, 6, 68, 9, 8, 69, 11, 10, 70, 13, 12, 71, 15, 14, 72, 17, 16, 73, 19, 18, 74, 21, 20, 75, 23, 22, 76, 25, 24, 77, 27, 26, 78, 29, 28, 79, 31, 30, 80, 33, 32, 81, 35, 34, 82, 37, 36, 83, 39, 38, 84, 41, 40, 85, 43, 42, 86, 45, 44, 87, 47, 46, 88, 49, 48, 89, 51, 50, 90, 53, 52, 91, 55, 54, 92, 57, 56, 93, 59, 58, 94, 61, 60, 95, 63, 62, 96, 65, 64, 97, 67, 66, 98, 69, 68, 99, 71, 70, 100, 73, 72, 101, 75, 74, 102, 77, 76, 103, 79, 78, 104, 81, 80, 105, 83, 82, 106, 85, 84, 107, 87, 86, 108, 89, 88, 109, 91, 90, 110, 93, 92, 111, 95, 94, 112, 97, 96, 113, 99, 98, 114, 101, 100, 115, 103, 102, 116, 105, 104, 117, 107, 106, 118, 109, 108, 119, 111, 110, 120, 113, 112, 121, 115, 114, 122, 117, 116, 123, 119, 118, 124, 121, 120, 125, 123, 122, 126, 125, 124, 127, 127, 126};

static inline uint64_t rdtscp64() {
  uint32_t low, high;
  asm volatile ("rdtscp": "=a" (low), "=d" (high) :: "ecx");
  return (((uint64_t)high) << 32) | low;
}

void print(vector<int> a)		//print the vector 
{
	for(int i=0; i<a.size(); i++)
		cout<<a.at(i)<<" ";
	cout<<endl;
}

int inverse(int a, int mod)	//returns the inverse modulus
{
    int init = mod;
    int y = 0;
    int x = 1;
 
    while (a>1)
    {
        int q = a/mod;
        int temp = mod;
        mod = a % mod;
        a = temp;
        temp = y;
        y = x - q * y;
        x = temp;
    }
 
    if (x < 0)
        x += init;
 
    return x;
}

vector<int> precompute(int n, int zeta, int q, int flag)		//used to precompute the roots of unity for zeta
{
	vector<int> z(n);		
	vector<int> r{0, n/2};

	for(int i=2; i<n; i*=2)			//bit reverse for n degrees
		for(int j=i-1; j>=0; j--)
			r.push_back(r.at(r.size()-i)+(n/(i*2)));	//add n/(i*2) to the previous (i*2) elements to get the next i*2 elements

	for(int k=0; k<n; k++)
	{
		int temp = 1;

		for(int j=0; j<r[k]; j++)			//z[k] = zeta^brv(k) mod q
			temp = (temp*zeta)%q;	
	
		z[k] = temp;

		if(flag == 1)						//reverse z[k] = zeta^-(brv[k]+1) mod q
			z[k] = inverse((z[k]*zeta)%q, q);
	}

	return z;
}

vector<int> NTT_forward(vector<int> c, int q, vector<int> z)	//performs the forward NTT process
{
	int k = 1;
	int j = 0; 
	int n = c.size();

	for(int l=n/2; l>0; l/=2)						//NTT algorithm
		for(int s=0; s<n; s=j+l)
		{
			for(j=s; j<s+l; j++)
			{
				int t = (z[k] * c[j+l])%q;
				c[j+l] = (c[j]+q - t)%q;
				c[j] = (c[j] + t)%q;
			}

			k++;
		}

	return c;
}

vector<int> NTT_inverse(vector<int> c, int q, int zeta) //performs the inverse NTT process
{
	int k = 0;
	int j = 0;
	int n = c.size();
	vector<int> z = precompute(n, zeta, q, 1);	//precompute the values for zeta

	for(int l=1; l<n; l*=2)						//NTT algorithm
		for(int s=0; s<n; s+=j+l)
		{
			for(j=s; j<s+l; j++)
			{
				int temp = c[j];
				c[j] = (temp + c[j+l])%q;
				c[j+l] = (temp + q - c[j+l])%q;
				c[j+l] = (c[j+l] * z[k])%q;
			}	

			k++;
		}
	int invN = inverse(n,q);

	for(j=0; j<n; j++)
		c[j] = (c[j] * invN)%q;
	
	return c;
}

vector<int> pointwise_MUL(vector<int> a, vector<int> b, int q)
{
	for(int i=0; i<a.size(); i++)
		a[i] = (a[i]*b[i])%q;

	return a;
}

vector<int> generate(int n, int q)
{
	vector<int> t;

	for(int i=0; i<n; i++)
		t.push_back(rand()%q);

	return t;
}

int main(int argc, char* argv[])
{
	//set seed
	srand(0);
	
	//parameters
	int n = 8;	
	int q = 17;
	int zeta = 2;

	vector<int> c = {2,5,3,4,4,3,5,2};					//generate the polynomials
	vector<int> d = generate(n, q);
	vector<int> z = precompute(n, zeta, q, 0);		//precompute the values for zeta

	long long total = 0;
	uint64_t time;
	int loop = 0;
	uint64_t t;

	c = NTT_forward(c,q,z);
	print(c);
	
	return 0;
}
